#include <iostream>
#include <vector> 
#include <algorithm>
#include <string>

using namespace std;

struct Fenwick {
    // —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö Fenwick Tree –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Å—á—ë—Ç–∞ –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã—Ö —Å—É–º–º
    int n;
    vector<int> fenw;
    Fenwick(int n): n(n), fenw(n+1,0) {}
    
    void update(int i, int delta) {
        for (; i <= n; i += i & (-i)) {
            fenw[i] += delta;
        }
    }
    
    int query(int i) {
        //  –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–∏–∫—Å–Ω–æ–π —Å—É–º–º—ã –æ—Ç 1 –¥–æ i
        int s = 0;
        for (; i > 0; i -= i & (-i)) {
            s += fenw[i];
        }
        return s;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å pos, —Ç–∞–∫–æ–π —á—Ç–æ –ø—Ä–µ—Ñ–∏–∫—Å fenw –¥–æ pos >= k
    int find_kth(int k) {
        int pos = 0;
        int bit_mask = 1 << (31 - __builtin_clz(n)); 
        // –∏—â–µ–º –∏–Ω–¥–µ–∫—Å –±–∏–Ω—Ä–∞–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –ø–æ Fenw
        for (; bit_mask > 0; bit_mask >>= 1) {
            int next_pos = pos + bit_mask;
            if (next_pos <= n && fenw[next_pos] < k) {
                k -= fenw[next_pos];
                pos = next_pos;
            }
        }
        return pos + 1;
    }
};

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    int N; 
    cin >> N;
    
    vector<string> queries_str; // —Ö—Ä–∞–Ω–∏—Ç –∏–º–µ–Ω–∞ –∫–Ω–∏–≥
    vector<long long> queries_k; // —Ö—Ä–∞–Ω–∏—Ç –∑–Ω–∞—á–µ–Ω–∏—è ùëò –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤. 
    // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –∏–º–µ–Ω–µ–º, –≤ queries_k –∑–∞–ø–∏—Å—ã–≤–∞–µ–º ‚àí1
    
    queries_str.reserve(N);
    queries_k.reserve(N);

    vector<string> names; 
    names.reserve(N);

    for (int i = 0; i < N; i++) {
        string q; cin >> q;
        if (isdigit(q[0])) {
            queries_str.push_back("");
            queries_k.push_back(stoll(q));
        } else {
            queries_str.push_back(q);
            queries_k.push_back(-1);
            names.push_back(q);
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ names –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
    sort(names.begin(), names.end());
    names.erase(unique(names.begin(), names.end()), names.end());
    
    // –°–æ–∑–¥–∞—ë–º –¥–µ—Ä–µ–≤–æ –§–µ–Ω–≤–∏–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º ùëÄ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º—ë–Ω.
    int M = (int)names.size();
    Fenwick fenw(M);

    for (int i = 0; i < N; i++) {
        if (queries_k[i] == -1) {
            // –í—Å—Ç–∞–≤–∫–∞ –∏–º–µ–Ω–∏
            string &nm = queries_str[i];
            int id = (int)(lower_bound(names.begin(), names.end(), nm) - names.begin()) + 1;
            fenw.update(id, 1);
        } else {
            // –ó–∞–ø—Ä–æ—Å k
            int k = (int)queries_k[i];
            int id = fenw.find_kth(k);
            cout << names[id-1] << "\n";
        }
    }

    return 0;
}
